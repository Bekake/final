{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as CodeMirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/mode/javascript/javascript.js';\nimport 'codemirror/mode/gfm/gfm.js';\nimport 'codemirror/addon/edit/closebrackets.js';\nimport 'codemirror/addon/edit/matchbrackets.js';\nimport { coding } from '../mytextes/codetext.js';\nexport default {\n  data() {\n    return {\n      myshow: false,\n      intext: \"\",\n      mytext: coding[2],\n      myall: []\n    };\n  },\n  mounted() {\n    this.editor = CodeMirror.fromTextArea(document.getElementById(\"program\"), {\n      lineNumbers: true,\n      theme: 'dracula',\n      mode: 'javascript',\n      autoCloseBrackets: true,\n      matchBrackets: true\n    });\n    this.editor.setValue(this.intext);\n    this.editor.on('change', () => {\n      this.intext = this.editor.getValue();\n      this.check(this.intext);\n    });\n  },\n  methods: {\n    getsecond(num, birinchi, ikkinchi, yourclass) {\n      let birinfo = {\n        indexnum: num,\n        expect: this.mytext[num],\n        writtenchar: birinchi,\n        class: yourclass\n      };\n      let lastindex = this.mytext.indexOf(ikkinchi);\n      let ikkiinfo = {\n        indexnum: lastindex,\n        expect: this.mytext[num],\n        writtenchar: ikkinchi,\n        class: 'correct'\n      };\n      this.myall.push(birinfo, ikkiinfo);\n    },\n    check(text) {\n      let mylength = text.length - 1;\n      this.myall = [];\n      for (let i = 0; i <= mylength; i++) {\n        let goon = true;\n        let myinfo = {\n          indexnum: i,\n          expect: this.mytext[i],\n          writtenchar: text[i],\n          class: 'correct'\n        };\n        if (text[i] !== this.mytext[i]) {\n          myinfo.class = 'incorrect';\n        }\n        if (text[i] == '(') {\n          this.getsecond(i, '(', ')', myinfo.class);\n          goon = false;\n        } else if (text[i] == ')') {\n          goon = false;\n        }\n        if (goon) {\n          this.myall.push(myinfo);\n        }\n      }\n      console.log(this.myall);\n      // let second = {\n      //     indexnum : mylength-1,\n      //     wholetextch : chechtext,\n      //     writtentext : text,\n      //     class: 'incorrect'\n      // }\n      // this.myall = this.myall.filter(element => element.indexnum < mylength)\n      // if(text.charAt(mylength-1) == '('){\n      //     let myind = this.mytext.indexOf(')')\n      //     myinfo.indexnum = myind;\n      //     myinfo.class = 'correct',\n      //     this.myall.push(myinfo)\n      //     if(chechtext.charAt(mylength-1) == '('){\n      //         second.class = 'correct'\n      //     }\n      //     this.myall.push(second)\n      //     goon = false;\n      // }\n\n      // if(text.charAt(mylength) == chechtext.charAt(mylength)){\n      //     myinfo.class = 'correct'\n\n      // }\n      // if(goon){\n      //     this.myall.push(myinfo)\n      // }\n      // console.log(this.myall)\n      // console.log(this.myall)\n      // console.log(text.charAt(mylength-1))\n      // if(text == chechtext){\n      //     console.log(\"correct\")\n      // }\n      // else{\n      //     console.log(\"incorrect\")\n      // }\n    }\n  }\n};","map":{"version":3,"names":["CodeMirror","coding","data","myshow","intext","mytext","myall","mounted","editor","fromTextArea","document","getElementById","lineNumbers","theme","mode","autoCloseBrackets","matchBrackets","setValue","on","getValue","check","methods","getsecond","num","birinchi","ikkinchi","yourclass","birinfo","indexnum","expect","writtenchar","class","lastindex","indexOf","ikkiinfo","push","text","mylength","length","i","goon","myinfo","console","log"],"sources":["C:\\Users\\Windows 11\\All\\real\\vuejob\\src\\views\\new.vue"],"sourcesContent":["<template>\r\n    <textarea v-model=\"intext\" name=\"programming\" id=\"program\" @input=\"check\"></textarea>\r\n    <pre><span v-for=\"(letter, index) in mytext\" class=\"every\" :key=\"index\">{{ letter }}</span></pre>\r\n    <pre>{{ intext }}</pre>\r\n</template> \r\n<script>\r\nimport * as CodeMirror from 'codemirror';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport 'codemirror/mode/javascript/javascript.js';\r\nimport 'codemirror/mode/gfm/gfm.js';\r\nimport 'codemirror/addon/edit/closebrackets.js';\r\nimport 'codemirror/addon/edit/matchbrackets.js';\r\nimport {coding} from '../mytextes/codetext.js';\r\nexport default{\r\n    data(){\r\n        return{\r\n            myshow: false,\r\n            intext: \"\",\r\n            mytext : coding[2],\r\n            myall: [],\r\n        }\r\n    },\r\n    mounted() {\r\n        this.editor = CodeMirror.fromTextArea(document.getElementById(\"program\"), {\r\n            lineNumbers: true,\r\n            theme: 'dracula',\r\n            mode: 'javascript',\r\n            autoCloseBrackets: true,\r\n            matchBrackets: true,\r\n        });\r\n        this.editor.setValue(this.intext);\r\n        this.editor.on('change', () => {\r\n            this.intext = this.editor.getValue();\r\n            this.check(this.intext)\r\n        });\r\n    },\r\n    methods:{\r\n        getsecond(num, birinchi, ikkinchi, yourclass){\r\n            let birinfo = {\r\n                indexnum : num,\r\n                expect: this.mytext[num],\r\n                writtenchar: birinchi,\r\n                class: yourclass,\r\n            }\r\n            let lastindex = this.mytext.indexOf(ikkinchi);\r\n            let ikkiinfo = {\r\n                indexnum : lastindex,\r\n                expect: this.mytext[num],\r\n                writtenchar: ikkinchi,\r\n                class: 'correct',\r\n            }\r\n            this.myall.push(birinfo, ikkiinfo)\r\n        },\r\n        check(text){\r\n            let mylength = text.length-1;\r\n            this.myall = []\r\n            for(let i=0;i<=mylength;i++){\r\n                let goon = true;\r\n                let myinfo = {\r\n                    indexnum : i,\r\n                    expect : this.mytext[i],\r\n                    writtenchar : text[i],\r\n                    class: 'correct',\r\n                }\r\n                if(text[i] !== this.mytext[i]){\r\n                    myinfo.class = 'incorrect'\r\n                }\r\n                if(text[i] == '('){\r\n                    this.getsecond(i, '(', ')', myinfo.class)\r\n                    goon = false;\r\n                }\r\n                else if(text[i] == ')'){\r\n                    goon = false;\r\n                }\r\n                if(goon){\r\n                    this.myall.push(myinfo)\r\n                }\r\n                \r\n            }\r\n            console.log(this.myall)\r\n            // let second = {\r\n            //     indexnum : mylength-1,\r\n            //     wholetextch : chechtext,\r\n            //     writtentext : text,\r\n            //     class: 'incorrect'\r\n            // }\r\n            // this.myall = this.myall.filter(element => element.indexnum < mylength)\r\n            // if(text.charAt(mylength-1) == '('){\r\n            //     let myind = this.mytext.indexOf(')')\r\n            //     myinfo.indexnum = myind;\r\n            //     myinfo.class = 'correct',\r\n            //     this.myall.push(myinfo)\r\n            //     if(chechtext.charAt(mylength-1) == '('){\r\n            //         second.class = 'correct'\r\n            //     }\r\n            //     this.myall.push(second)\r\n            //     goon = false;\r\n            // }\r\n\r\n            \r\n            // if(text.charAt(mylength) == chechtext.charAt(mylength)){\r\n            //     myinfo.class = 'correct'\r\n                \r\n            // }\r\n            // if(goon){\r\n            //     this.myall.push(myinfo)\r\n            // }\r\n            // console.log(this.myall)\r\n            // console.log(this.myall)\r\n            // console.log(text.charAt(mylength-1))\r\n            // if(text == chechtext){\r\n            //     console.log(\"correct\")\r\n            // }\r\n            // else{\r\n            //     console.log(\"incorrect\")\r\n            // }\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n.every{\r\n    color: black;\r\n}\r\n.correct{\r\n    color: blue;\r\n}\r\n.incorrect{\r\n    color: red;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}