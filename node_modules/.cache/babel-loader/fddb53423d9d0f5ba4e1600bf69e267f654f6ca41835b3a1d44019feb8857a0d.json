{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      mytext: \"This approach will add a horizontal line to every letter in the spans with the width slightly shorter than the letter itself. Adjust the width and height values in the .every::after style to get the exact appearance you desire.\",\n      intext: \"\",\n      myall: [],\n      upcoming: 0,\n      mshow: true,\n      selected: \"uzb\"\n    };\n  },\n  methods: {\n    mytry(event) {\n      console.log(event);\n    },\n    change() {\n      if (this.mshow) {\n        this.$refs.inputref.focus();\n      } else {\n        this.$refs.inputref.blur();\n      }\n      this.mshow = !this.mshow;\n    },\n    getclass(index) {\n      let willclass = 'default';\n      if (this.myall.length > 0) {\n        for (let i = 0; i < this.intext.length; i++) {\n          if (index == this.upcoming) {\n            willclass = 'upcoming';\n            break;\n          } else if (index == this.myall[i].indexnum) {\n            willclass = this.myall[i].class;\n            break;\n          }\n        }\n      }\n      return willclass;\n    },\n    star(event) {\n      let myword = this.intext;\n      let plus = 0;\n      let current = 1;\n      if (event.key == \"Backspace\") {\n        myword = myword.slice(0, -1);\n        current = 0;\n      } else if (event.altKey || event.ctrlKey || event.metaKey || event.key == \"Enter\" || event.key == \"AltGraph\" || event.key == \"Alt\" || event.key == \"ArrowUp\" || event.key == \"ArrowUp\" || event.key == \"ArrowDown\" || event.key == \"ArrowRight\" || event.key == \"ArrowLeft\") {\n        myword = myword;\n      } else if (event.key == 'Shift') {\n        console.log(event.key.toUpperCase);\n      } else {\n        myword += event.key;\n        plus = 1;\n      }\n      this.intext = myword;\n      let mylength = myword.length - plus;\n      this.upcoming = mylength + current;\n      let inputinfo = {\n        indexnum: mylength,\n        class: 'correct',\n        expectedchar: this.mytext.charAt(mylength),\n        writtenchar: myword.charAt(mylength)\n      };\n      this.myall = this.myall.filter(element => element.indexnum !== mylength);\n      this.myall = this.myall.filter(elem => elem.indexnum <= mylength);\n      if (this.mytext.charAt(mylength) !== myword.charAt(mylength)) {\n        inputinfo.class = 'incorrect';\n      }\n      this.myall.push(inputinfo);\n    }\n  }\n};","map":{"version":3,"names":["data","mytext","intext","myall","upcoming","mshow","selected","methods","mytry","event","console","log","change","$refs","inputref","focus","blur","getclass","index","willclass","length","i","indexnum","class","star","myword","plus","current","key","slice","altKey","ctrlKey","metaKey","toUpperCase","mylength","inputinfo","expectedchar","charAt","writtenchar","filter","element","elem","push"],"sources":["C:\\Users\\Windows 11\\All\\real\\vuejob\\src\\views\\speed.vue"],"sourcesContent":["<template>\r\n<div class=\"container\">\r\n    <label for=\"til\">Tilni tanlang</label>\r\n    <select v-model=\"selected\" name=\"mytil\" id=\"til\">\r\n        <option value=\"uzb\">O'zbek</option>\r\n        <option value=\"rus\">Rus</option>\r\n        <option value=\"ingliz\">Ingliz</option>\r\n        <option value=\"code\">Code yozish</option>\r\n    </select>\r\n    <button @click=\"change\">O'yinni boshlash</button>  \r\n    <div class=\"game\" tabindex=\"0\" @keydown=\"star\" ref=\"inputref\">\r\n        <div class=\"words\"><span class=\"every\" v-for=\"(letter, index) in mytext\" :key=\"index\" :class=\"getclass(index)\">{{ letter }}</span></div>\r\n    </div>\r\n    <p>{{ intext }}</p>\r\n    <p>{{ selected }}</p>\r\n</div>\r\n\r\n</template>\r\n<script>\r\nexport default{\r\n    data(){\r\n        return{\r\n            mytext : \"This approach will add a horizontal line to every letter in the spans with the width slightly shorter than the letter itself. Adjust the width and height values in the .every::after style to get the exact appearance you desire.\",\r\n            intext : \"\",\r\n            myall : [],\r\n            upcoming: 0,\r\n            mshow: true,\r\n            selected: \"uzb\",\r\n        }\r\n    },\r\n    methods:{\r\n        mytry(event){\r\n            console.log(event)\r\n\r\n        },\r\n        change(){\r\n            if(this.mshow){\r\n                this.$refs.inputref.focus();\r\n            }\r\n            else{\r\n                this.$refs.inputref.blur();\r\n            }\r\n            this.mshow =!this.mshow;\r\n            \r\n        },\r\n        getclass(index){\r\n            let willclass = 'default';\r\n            if(this.myall.length > 0){\r\n                for(let i = 0; i < this.intext.length;i++){\r\n                    if(index == this.upcoming){\r\n                        willclass = 'upcoming'\r\n                        break;\r\n                    }\r\n                    else if(index== this.myall[i].indexnum){\r\n                        willclass = this.myall[i].class;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            return willclass;\r\n        },\r\n        star(event){\r\n            let myword = this.intext\r\n            let plus = 0;\r\n            let  current = 1;\r\n            if(event.key == \"Backspace\"){\r\n                myword  = myword.slice(0, -1);\r\n                current = 0;\r\n            }\r\n            else if( event.altKey || event.ctrlKey || event.metaKey || event.key == \"Enter\" || event.key == \"AltGraph\" || event.key == \"Alt\" || event.key == \"ArrowUp\" || event.key == \"ArrowUp\"|| event.key == \"ArrowDown\"|| event.key == \"ArrowRight\"|| event.key == \"ArrowLeft\" ){\r\n                myword = myword;\r\n            }\r\n            else if(event.key == 'Shift'){\r\n                console.log(event.key.toUpperCase)\r\n            }\r\n            else{\r\n                myword += event.key\r\n                plus = 1;\r\n            }\r\n            this.intext = myword;\r\n            let mylength = myword.length-plus;\r\n            this.upcoming = mylength +current;\r\n            let inputinfo = {\r\n                indexnum : mylength,\r\n                class : 'correct',\r\n                expectedchar: this.mytext.charAt(mylength),\r\n                writtenchar: myword.charAt(mylength), \r\n            }\r\n            this.myall = this.myall.filter(element => element.indexnum !== mylength)\r\n            this.myall = this.myall.filter(elem => elem.indexnum <= mylength)\r\n            if(this.mytext.charAt(mylength) !== myword.charAt(mylength)){\r\n                inputinfo.class = 'incorrect'\r\n            }\r\n            this.myall.push(inputinfo)\r\n            \r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n.container{\r\n    margin-top: 100px;\r\n}\r\n*{\r\n    font-size: 30px;\r\n}\r\n.upcoming{\r\n    color: rgb(84, 84, 250);\r\n    position: relative;\r\n}\r\n.upcoming::after{\r\n    content: '';\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 0;\r\n    transform: translateX(-50%);\r\n    width: 80%; \r\n    height: 2px; \r\n    background-color: rgb(84, 84, 250); \r\n    animation: animate 1s linear infinite;\r\n}\r\n@keyframes animate{\r\n    0%{\r\n        opacity: 1;\r\n    }\r\n    50%{\r\n        opacity: 0;\r\n    }\r\n    100%{\r\n        opacity: 1;\r\n    }\r\n}\r\n.every{\r\n    font-size: 30px;\r\n    display: inline-block;\r\n    line-height: 1;\r\n    vertical-align: middle;\r\n    position: relative;\r\n    text-align: center;\r\n    width: 20px;\r\n    margin-top: 3px;\r\n    margin-right: 0.8px;\r\n    border-radius: 13%;\r\n    height: 40px;\r\n}\r\n.default{\r\n    color: rgb(59, 59, 59);\r\n}\r\n.correct{\r\n    background-color: rgb(89, 255, 89);\r\n    color: green;\r\n}\r\n.incorrect{\r\n    color: rgb(236, 74, 74);\r\n    background-color: rgb(160, 69, 69);\r\n}\r\n.game{\r\n    width: 80%;\r\n    margin: auto;\r\n    background-color: rgb(208, 203, 203);\r\n    position: relative;\r\n}\r\n.words{\r\n    filter: blur(4px);\r\n}\r\n.game:focus .game{\r\n    border: none;\r\n}\r\n.game:focus .words{\r\n    filter: blur(0px);\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}