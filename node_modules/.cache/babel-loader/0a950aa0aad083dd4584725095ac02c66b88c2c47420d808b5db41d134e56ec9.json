{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      mytext: \"This is something for text, please enter your text here and try again later to get more information\",\n      intext: \"\",\n      myall: []\n    };\n  },\n  methods: {\n    change() {\n      this.$refs.inputref.focus();\n    },\n    getclass(index) {\n      let willclass = 'default';\n      if (this.myall.length > 0) {\n        for (let i = 0; i < this.intext.length; i++) {\n          if (index == this.myall[i].indexnum) {\n            willclass = this.myall[i].class;\n            break;\n          }\n        }\n      }\n      return willclass;\n    },\n    star(event) {\n      let myword = this.intext;\n      let plus = 0;\n      if (event.key == \"Backspace\") {\n        myword = myword.slice(0, -1);\n      } else if (event.key == \"CapsLock\" || event.key == \"Control\" || event.key == \"AltGraph\" || event.key == \"Alt\" || event.key == \"ArrowUp\") {\n        myword = myword;\n      } else if (event.key == 'Shift') {\n        console.log(event.key.toUpperCase);\n      } else {\n        myword += event.key;\n        plus = 1;\n      }\n      this.intext = myword;\n      let mylength = myword.length - plus;\n      console.log(myword);\n      console.log(this.mytext.charAt(mylength));\n      console.log(myword.charAt(mylength));\n      let inputinfo = {\n        indexnum: mylength,\n        class: 'correct',\n        expectedchar: this.mytext.charAt(mylength),\n        writtenchar: myword.charAt(mylength)\n      };\n      this.myall = this.myall.filter(element => element.indexnum !== mylength);\n      this.myall = this.myall.filter(elem => elem.indexnum <= mylength);\n      if (this.mytext.charAt(mylength) !== myword.charAt(mylength)) {\n        inputinfo.class = 'incorrect';\n      }\n      this.myall.push(inputinfo);\n      console.log(this.myall);\n    }\n  }\n};","map":{"version":3,"names":["data","mytext","intext","myall","methods","change","$refs","inputref","focus","getclass","index","willclass","length","i","indexnum","class","star","event","myword","plus","key","slice","console","log","toUpperCase","mylength","charAt","inputinfo","expectedchar","writtenchar","filter","element","elem","push"],"sources":["C:\\Users\\Windows 11\\All\\real\\vuejob\\src\\views\\speed.vue"],"sourcesContent":["<template>\r\n<div class=\"game\" tabindex=\"0\" @keydown=\"star\" ref=\"inputref\">\r\n    <div class=\"words\"><span  v-for=\"(letter, index) in mytext\" :key=\"index\" :class=\"getclass(index)\">{{ letter }}</span></div>\r\n    <div class=\"focused\">Click here to begin</div>\r\n</div>\r\n<button @click=\"change\">add</button>\r\n<p>{{ intext }}</p>\r\n</template>\r\n<script>\r\nexport default{\r\n    data(){\r\n        return{\r\n            mytext : \"This is something for text, please enter your text here and try again later to get more information\",\r\n            intext : \"\",\r\n            myall : [],\r\n        }\r\n    },\r\n    methods:{\r\n        change(){\r\n            this.$refs.inputref.focus();\r\n        },\r\n        getclass(index){\r\n            let willclass = 'default';\r\n            if(this.myall.length > 0){\r\n                for(let i = 0; i < this.intext.length;i++){\r\n                    if(index== this.myall[i].indexnum){\r\n                        willclass = this.myall[i].class;\r\n                        break;\r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n            return willclass;\r\n        },\r\n        star(event){\r\n            let myword = this.intext\r\n            let plus = 0;\r\n            if(event.key == \"Backspace\"){\r\n                myword  = myword.slice(0, -1);\r\n            }\r\n            else if(event.key == \"CapsLock\" || event.key == \"Control\" || event.key == \"AltGraph\" || event.key == \"Alt\" || event.key == \"ArrowUp\" ){\r\n                myword = myword;\r\n            }\r\n            else if(event.key == 'Shift'){\r\n                console.log(event.key.toUpperCase)\r\n            }\r\n            else{\r\n                myword += event.key\r\n                plus = 1;\r\n            }\r\n            this.intext = myword;\r\n            let mylength = myword.length-plus;\r\n            console.log(myword)\r\n            console.log(this.mytext.charAt(mylength));\r\n            console.log(myword.charAt(mylength))\r\n            \r\n            let inputinfo = {\r\n                indexnum : mylength,\r\n                class : 'correct',\r\n                expectedchar: this.mytext.charAt(mylength),\r\n                writtenchar: myword.charAt(mylength), \r\n            }\r\n            this.myall = this.myall.filter(element => element.indexnum !== mylength)\r\n            this.myall = this.myall.filter(elem => elem.indexnum <= mylength)\r\n            if(this.mytext.charAt(mylength) !== myword.charAt(mylength)){\r\n                inputinfo.class = 'incorrect'\r\n            }\r\n            this.myall.push(inputinfo)\r\n            console.log(this.myall)\r\n            \r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n\r\n*{\r\n    font-size: 30px;\r\n}\r\n.default{\r\n    color: rgb(59, 59, 59);\r\n}\r\n.correct{\r\n    color: blue;\r\n}\r\n.incorrect{\r\n    color: red;\r\n}\r\n.game{\r\n    margin-top: 100px;\r\n    height: 100px;\r\n    width: 80%;\r\n    margin: auto;\r\n    background-color: rgb(208, 203, 203);\r\n    position: relative;\r\n}\r\n.words{\r\n    filter: blur(4px);\r\n}\r\n.focused{\r\n    position: absolute;\r\n    inset: 0;\r\n    text-align: center;\r\n}\r\n.game:focus .focused{\r\n    display: none;\r\n}\r\n.game:focus .words{\r\n    filter: blur(0px);\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}