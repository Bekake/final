{"ast":null,"code":"import { DateTime } from \"luxon\";\nexport default {\n  data() {\n    return {\n      cityname: '',\n      cloudy: require('@/assets/cloudy.png'),\n      search: require('@/assets/search.png'),\n      rain: require('@/assets/rain.png'),\n      sunny: require('@/assets/sunny.png'),\n      thunder: require('@/assets/thunder.png'),\n      hm: \"\",\n      wd: \"\"\n    };\n  },\n  // mounted(){\n  //   this.getdata()\n  // },\n  methods: {\n    gettime(timezone) {\n      if (timezone) {\n        const now = DateTime.now().setZone(timezone);\n        console.log(now.toString());\n        const dateFormatted = now.toFormat(\"d-LLLL\");\n        const timeFormatted = now.toFormat(\"HH:mm\");\n        console.log(timeFormatted);\n        console.log(dateFormatted);\n        // dayofweek = now.toFormat('EEEE');\n        // console.log(dayofweek);\n        //  \n\n        // const hkun = this.hkuns(dayofweek)\n        // this.hm = `${timeFormatted}`;\n        // this.wd = `${hkun}, ${dateFormatted}`\n      } else {\n        this.time = \"Unknown city or timezone\";\n      }\n    },\n    async getdata() {\n      try {\n        let cname;\n        if (this.cityname == '') {\n          cname = \"Tashkent\";\n        } else {\n          cname = this.cityname;\n        }\n        const response = await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${cname}?unitGroup=us&key=S8GRPS82BJYVQWBERVPLSHJRA&contentType=json`);\n        const data = await response.json();\n        this.gettime(data.timezone);\n        console.log(data);\n      } catch (error) {\n        console.log('City name is not found');\n      }\n    }\n  }\n};","map":{"version":3,"names":["DateTime","data","cityname","cloudy","require","search","rain","sunny","thunder","hm","wd","methods","gettime","timezone","now","setZone","console","log","toString","dateFormatted","toFormat","timeFormatted","time","getdata","cname","response","fetch","json","error"],"sources":["C:\\Users\\Windows 11\\All\\real\\vuejob\\src\\views\\AboutView.vue"],"sourcesContent":["<template>\n<h1>Boshladim</h1>\n<input type=\"text\" v-model=\"cityname\">\n<p>{{ cityname }}</p>\n<button @click=\"getdata\"><img :src=\"search\" alt=\"search\"></button>\n<p>{{ wd }} -{{ hm }}</p>\n</template>\n<script>\nimport { DateTime } from \"luxon\";\nexport default {\n  data(){\n    return {\n      cityname: '',\n      cloudy : require('@/assets/cloudy.png'),\n      search : require('@/assets/search.png'),\n      rain : require('@/assets/rain.png'),\n      sunny : require('@/assets/sunny.png'),\n      thunder : require('@/assets/thunder.png'),\n      hm: \"\",\n      wd: \"\",\n\n    }\n\n  },\n  // mounted(){\n  //   this.getdata()\n  // },\n  methods: {\n    gettime(timezone){\n      if (timezone) {\n        \n        const now = DateTime.now().setZone(timezone);\n        console.log(now.toString());\n        const dateFormatted = now.toFormat(\"d-LLLL\"); \n        const timeFormatted = now.toFormat(\"HH:mm\");\n        console.log(timeFormatted);\n        console.log(dateFormatted);\n        // dayofweek = now.toFormat('EEEE');\n        // console.log(dayofweek);\n        //  \n        \n        // const hkun = this.hkuns(dayofweek)\n        // this.hm = `${timeFormatted}`;\n        // this.wd = `${hkun}, ${dateFormatted}`\n      } \n      else {\n        this.time = \"Unknown city or timezone\";\n      }\n    },\n    \n    async getdata() {\n      try {\n        let cname;\n        if (this.cityname == '') {\n          cname = \"Tashkent\"\n        }\n        else{\n          cname = this.cityname\n        }\n        const response = await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${cname}?unitGroup=us&key=S8GRPS82BJYVQWBERVPLSHJRA&contentType=json`)\n        const data = await response.json();\n        this.gettime(data.timezone);\n        console.log(data);\n      }\n      catch (error) {\n        console.log('City name is not found');\n      }\n      \n      \n    } \n  }\n}\n\n</script>\n<style scoped>\nimg{\n  width: 32px;\n}\n</style>"],"mappings":"AAQA,SAASA,QAAO,QAAS,OAAO;AAChC,eAAe;EACbC,IAAIA,CAAA,EAAE;IACJ,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,MAAK,EAAIC,OAAO,CAAC,qBAAqB,CAAC;MACvCC,MAAK,EAAID,OAAO,CAAC,qBAAqB,CAAC;MACvCE,IAAG,EAAIF,OAAO,CAAC,mBAAmB,CAAC;MACnCG,KAAI,EAAIH,OAAO,CAAC,oBAAoB,CAAC;MACrCI,OAAM,EAAIJ,OAAO,CAAC,sBAAsB,CAAC;MACzCK,EAAE,EAAE,EAAE;MACNC,EAAE,EAAE;IAEN;EAEF,CAAC;EACD;EACA;EACA;EACAC,OAAO,EAAE;IACPC,OAAOA,CAACC,QAAQ,EAAC;MACf,IAAIA,QAAQ,EAAE;QAEZ,MAAMC,GAAE,GAAId,QAAQ,CAACc,GAAG,CAAC,CAAC,CAACC,OAAO,CAACF,QAAQ,CAAC;QAC5CG,OAAO,CAACC,GAAG,CAACH,GAAG,CAACI,QAAQ,CAAC,CAAC,CAAC;QAC3B,MAAMC,aAAY,GAAIL,GAAG,CAACM,QAAQ,CAAC,QAAQ,CAAC;QAC5C,MAAMC,aAAY,GAAIP,GAAG,CAACM,QAAQ,CAAC,OAAO,CAAC;QAC3CJ,OAAO,CAACC,GAAG,CAACI,aAAa,CAAC;QAC1BL,OAAO,CAACC,GAAG,CAACE,aAAa,CAAC;QAC1B;QACA;QACA;;QAEA;QACA;QACA;MACF,OACK;QACH,IAAI,CAACG,IAAG,GAAI,0BAA0B;MACxC;IACF,CAAC;IAED,MAAMC,OAAOA,CAAA,EAAG;MACd,IAAI;QACF,IAAIC,KAAK;QACT,IAAI,IAAI,CAACtB,QAAO,IAAK,EAAE,EAAE;UACvBsB,KAAI,GAAI,UAAS;QACnB,OACI;UACFA,KAAI,GAAI,IAAI,CAACtB,QAAO;QACtB;QACA,MAAMuB,QAAO,GAAI,MAAMC,KAAK,CAAE,uFAAsFF,KAAM,8DAA6D;QACvL,MAAMvB,IAAG,GAAI,MAAMwB,QAAQ,CAACE,IAAI,CAAC,CAAC;QAClC,IAAI,CAACf,OAAO,CAACX,IAAI,CAACY,QAAQ,CAAC;QAC3BG,OAAO,CAACC,GAAG,CAAChB,IAAI,CAAC;MACnB,EACA,OAAO2B,KAAK,EAAE;QACZZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACvC;IAGF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}