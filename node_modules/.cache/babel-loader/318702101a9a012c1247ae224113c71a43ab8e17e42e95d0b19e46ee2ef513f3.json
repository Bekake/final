{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.intext = $event),\n    name: \"programming\",\n    id: \"program\",\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.check && $options.check(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.intext]]), _createElementVNode(\"pre\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.mytext, (letter, index) => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      class: \"every\",\n      key: index\n    }, _toDisplayString(letter), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"pre\", null, _toDisplayString($data.intext), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createElementVNode","_cache","$event","$data","intext","name","id","onInput","args","$options","check","_renderList","mytext","letter","index","class","key","_toDisplayString"],"sources":["C:\\Users\\Windows 11\\All\\real\\vuejob\\src\\views\\new.vue"],"sourcesContent":["<template>\r\n    <textarea v-model=\"intext\" name=\"programming\" id=\"program\" @input=\"check\"></textarea>\r\n    <pre><span v-for=\"(letter, index) in mytext\" class=\"every\" :key=\"index\">{{ letter }}</span></pre>\r\n    <pre>{{ intext }}</pre>\r\n</template> \r\n<script>\r\nimport * as CodeMirror from 'codemirror';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport 'codemirror/mode/javascript/javascript.js';\r\nimport 'codemirror/mode/gfm/gfm.js';\r\nimport 'codemirror/addon/edit/closebrackets.js';\r\nimport 'codemirror/addon/edit/matchbrackets.js';\r\nimport {coding} from '../mytextes/codetext.js';\r\nexport default{\r\n    data(){\r\n        return{\r\n            myshow: false,\r\n            intext: \"\",\r\n            mytext : coding[2],\r\n            myall: [],\r\n        }\r\n    },\r\n    mounted() {\r\n        this.editor = CodeMirror.fromTextArea(document.getElementById(\"program\"), {\r\n            lineNumbers: true,\r\n            theme: 'dracula',\r\n            mode: 'javascript',\r\n            autoCloseBrackets: true,\r\n            matchBrackets: true,\r\n        });\r\n        this.editor.setValue(this.intext);\r\n        this.editor.on('change', () => {\r\n            this.intext = this.editor.getValue();\r\n            this.check(this.intext)\r\n        });\r\n    },\r\n    methods:{\r\n        check(text){\r\n            let mylength = text.length-1;\r\n            let goon = true;\r\n            let chechtext = this.mytext.substring(0, mylength+1)\r\n            \r\n            this.myall = []\r\n            for(let i=0;i<=mylength;i++){\r\n                let myinfo = {\r\n                    indexnum : i,\r\n                    expect : this.mytext[i],\r\n                    writtenchar : text[i],\r\n                    class: 'correct',\r\n                }\r\n                myinfo.indexnum = i;\r\n                myinfo.expect = this.mytext[i]\r\n                myinfo.writtenchar = text[i]\r\n                if(text[i] !== this.mytext[i]){\r\n                    myinfo.class = 'incorrect'\r\n                }\r\n                this.myall.push(myinfo)\r\n            }\r\n            console.log(this.myall)\r\n            // let second = {\r\n            //     indexnum : mylength-1,\r\n            //     wholetextch : chechtext,\r\n            //     writtentext : text,\r\n            //     class: 'incorrect'\r\n            // }\r\n            // this.myall = this.myall.filter(element => element.indexnum < mylength)\r\n            // if(text.charAt(mylength-1) == '('){\r\n            //     let myind = this.mytext.indexOf(')')\r\n            //     myinfo.indexnum = myind;\r\n            //     myinfo.class = 'correct',\r\n            //     this.myall.push(myinfo)\r\n            //     if(chechtext.charAt(mylength-1) == '('){\r\n            //         second.class = 'correct'\r\n            //     }\r\n            //     this.myall.push(second)\r\n            //     goon = false;\r\n            // }\r\n\r\n            \r\n            // if(text.charAt(mylength) == chechtext.charAt(mylength)){\r\n            //     myinfo.class = 'correct'\r\n                \r\n            // }\r\n            // if(goon){\r\n            //     this.myall.push(myinfo)\r\n            // }\r\n            // console.log(this.myall)\r\n            // console.log(this.myall)\r\n            // console.log(text.charAt(mylength-1))\r\n            // if(text == chechtext){\r\n            //     console.log(\"correct\")\r\n            // }\r\n            // else{\r\n            //     console.log(\"incorrect\")\r\n            // }\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n.every{\r\n    color: black;\r\n}\r\n.correct{\r\n    color: blue;\r\n}\r\n.incorrect{\r\n    color: red;\r\n}\r\n</style>"],"mappings":";;uBAAAA,mBAAA,CAAAC,SAAA,S,gBACIC,mBAAA,CAAqF;IADzF,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IACuBC,KAAA,CAAAC,MAAM,GAAAF,MAAA;IAAEG,IAAI,EAAC,aAAa;IAACC,EAAE,EAAC,SAAS;IAAEC,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,KAAA,IAAAD,QAAA,CAAAC,KAAA,IAAAF,IAAA,CAAK;iEAArDL,KAAA,CAAAC,MAAM,E,GACzBJ,mBAAA,CAAiG,e,kBAA5FF,mBAAA,CAAsFC,SAAA,QAF/FY,WAAA,CAEyCR,KAAA,CAAAS,MAAM,EAF/C,CAEuBC,MAAM,EAAEC,KAAK;yBAA3BhB,mBAAA,CAAsF;MAA9CiB,KAAK,EAAC,OAAO;MAAEC,GAAG,EAAEF;wBAAUD,MAAM;oCACjFb,mBAAA,CAAuB,aAAAiB,gBAAA,CAAfd,KAAA,CAAAC,MAAM,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}