{"ast":null,"code":"import { DateTime } from \"luxon\";\nexport default {\n  data() {\n    return {\n      cityname: '',\n      cloudy: require('@/assets/cloudy.png'),\n      search: require('@/assets/search.png'),\n      rain: require('@/assets/rain.png'),\n      sunny: require('@/assets/sunny.png'),\n      thunder: require('@/assets/thunder.png'),\n      cityname: \"\",\n      defaultcityname: \"Tashkent\",\n      forhourdata: [],\n      data: [],\n      daily: [],\n      hourl: [],\n      city: \"\",\n      hm: \"\",\n      wd: \"\",\n      mindate: \"\",\n      maxdate: \"\",\n      hourlyweather: \"\",\n      tableshow: false,\n      yanasana: \"\"\n    };\n  },\n  // mounted(){\n  //   this.getdata()\n  // },\n  methods: {\n    gettime(timezone) {\n      if (timezone) {\n        const now = DateTime.now().setZone(timezone);\n        const dateFormatted = now.toFormat(\"d-LLLL\");\n        const timeFormatted = now.toFormat(\"HH:mm\");\n        const dayofweek = now.toFormat('EEE');\n        const hkun = this.hkuns(dayofweek);\n        this.hm = `${timeFormatted}`;\n        this.wd = `${hkun}, ${dateFormatted}`;\n      } else {\n        this.time = \"Unknown city or timezone\";\n      }\n    },\n    hkuns(enday) {\n      const haftakunlar = {\n        'Mon': 'Dushanba',\n        'Tue': 'Seshanba',\n        'Wed': 'Chorshanba',\n        'Thu': 'Payshanba',\n        'Fri': 'Juma',\n        'Sat': 'Shanba',\n        'Sun': 'Yakshanba'\n      };\n      return haftakunlar[enday];\n    },\n    selsiy(temp) {\n      let seltemp = (Math.floor((temp - 32) * 5) / 9).toFixed(1);\n      return `${seltemp} °C`;\n    },\n    nowinfo(info) {\n      const timeString = info.currentConditions.sunrise;\n      const [hours, minutes] = timeString.split(\":\");\n      const qchiqv = `${hours}:${minutes}`;\n      const another = info.currentConditions.sunset;\n      const [hou, minu] = another.split(\":\");\n      const qbotv = `${hou}:${minu}`;\n      this.forhourinfo = info;\n      let selsiytemp = this.selsiy(info.currentConditions.temp);\n      let inf = {\n        currentw: selsiytemp,\n        capname: data.resolvedAddress,\n        windspeed: data.currentConditions.windspeed,\n        foricon: iconify,\n        qchiq: qchiqv,\n        qbot: qbotv,\n        humidity: data.currentConditions.humidity\n      };\n    },\n    async getdata() {\n      try {\n        let cname;\n        if (this.cityname == '') {\n          cname = \"Tashkent\";\n        } else {\n          cname = this.cityname;\n        }\n        const response = await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${cname}?unitGroup=us&key=S8GRPS82BJYVQWBERVPLSHJRA&contentType=json`);\n        const data = await response.json();\n        this.gettime(data.timezone);\n        setInterval(() => {\n          this.gettime(data.timezone);\n        }, 30000);\n        console.log(data);\n      } catch (error) {\n        console.log('City name is not found');\n      }\n    }\n  }\n};","map":{"version":3,"names":["DateTime","data","cityname","cloudy","require","search","rain","sunny","thunder","defaultcityname","forhourdata","daily","hourl","city","hm","wd","mindate","maxdate","hourlyweather","tableshow","yanasana","methods","gettime","timezone","now","setZone","dateFormatted","toFormat","timeFormatted","dayofweek","hkun","hkuns","time","enday","haftakunlar","selsiy","temp","seltemp","Math","floor","toFixed","nowinfo","info","timeString","currentConditions","sunrise","hours","minutes","split","qchiqv","another","sunset","hou","minu","qbotv","forhourinfo","selsiytemp","inf","currentw","capname","resolvedAddress","windspeed","foricon","iconify","qchiq","qbot","humidity","getdata","cname","response","fetch","json","setInterval","console","log","error"],"sources":["C:\\Users\\Windows 11\\All\\real\\vuejob\\src\\views\\AboutView.vue"],"sourcesContent":["<template>\n<h1>Boshladim</h1>\n<input type=\"text\" v-model=\"cityname\">\n<p>{{ cityname }}</p>\n<button @click=\"getdata\"><img :src=\"search\" alt=\"search\"></button>\n<p>{{ wd }} -{{ hm }}</p>\n</template>\n<script>\nimport { DateTime } from \"luxon\";\nexport default {\n  data(){\n    return {\n      cityname: '',\n      cloudy : require('@/assets/cloudy.png'),\n      search : require('@/assets/search.png'),\n      rain : require('@/assets/rain.png'),\n      sunny : require('@/assets/sunny.png'),\n      thunder : require('@/assets/thunder.png'),\n      cityname: \"\",\n      defaultcityname:  \"Tashkent\",\n      forhourdata: [],\n      data: [],\n      daily: [],\n      hourl: [],\n      city: \"\",\n      hm: \"\",\n      wd: \"\",\n      mindate: \"\",\n      maxdate: \"\",\n      hourlyweather: \"\",\n      tableshow: false,\n      yanasana: \"\",\n    }\n\n  },\n  // mounted(){\n  //   this.getdata()\n  // },\n  methods: {\n    gettime(timezone){\n      if (timezone) {\n        const now = DateTime.now().setZone(timezone);\n        const dateFormatted = now.toFormat(\"d-LLLL\"); \n        const timeFormatted = now.toFormat(\"HH:mm\");\n        const dayofweek = now.toFormat('EEE');\n        const hkun = this.hkuns(dayofweek)\n        this.hm = `${timeFormatted}`;\n        this.wd = `${hkun}, ${dateFormatted}`\n      } \n      else {\n        this.time = \"Unknown city or timezone\";\n      }\n    },\n    hkuns(enday){\n    const haftakunlar = {\n      'Mon': 'Dushanba',\n      'Tue': 'Seshanba',\n      'Wed': 'Chorshanba',\n      'Thu': 'Payshanba',\n      'Fri': 'Juma',\n      'Sat': 'Shanba',\n      'Sun': 'Yakshanba'\n    };\n    return haftakunlar[enday];\n    },\n    selsiy(temp){\n      let seltemp=(Math.floor((temp-32)*5)/9).toFixed(1);\n      return `${seltemp} °C`;\n\n    },\n    nowinfo(info){\n      const timeString = info.currentConditions.sunrise;\n      const [hours, minutes] = timeString.split(\":\");\n      const qchiqv= `${hours}:${minutes}`;\n      const another = info.currentConditions.sunset;\n      const [hou, minu] = another.split(\":\");\n      const qbotv = `${hou}:${minu}`\n      this.forhourinfo=info;\n      let selsiytemp=this.selsiy(info.currentConditions.temp);\n      let inf = {\n        currentw: selsiytemp, \n        capname: data.resolvedAddress,\n        windspeed: data.currentConditions.windspeed,\n        foricon: iconify,\n        qchiq: qchiqv,\n        qbot: qbotv,\n        humidity: data.currentConditions.humidity,\n      }\n    },\n\n    async getdata() {\n      try {\n        let cname;\n        if (this.cityname == '') {\n          cname = \"Tashkent\"\n        }\n        else{\n          cname = this.cityname\n        }\n        const response = await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${cname}?unitGroup=us&key=S8GRPS82BJYVQWBERVPLSHJRA&contentType=json`)\n        const data = await response.json();\n        this.gettime(data.timezone);\n        setInterval(() => {\n          this.gettime(data.timezone);\n        }, 30000)\n        console.log(data);\n      }\n      catch (error) {\n        console.log('City name is not found');\n      }\n      \n      \n    } \n  }\n}\n\n</script>\n<style scoped>\nimg{\n  width: 32px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}