{"ast":null,"code":"export const coding = [, `n_terms = 10:\n    print(f\"Fibonacci sequence up to {n_terms} terms:\")`, `add(\"code\"){\n    return \"salom()\";\n}`, `function factorial(n) {\n    if (n < 0) {\n        return 'Factorial is not defined for negative numbers';\n    } else if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        let result = 1;\n        for (let i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}`];\nexport const python = [`def fibonacci(n):\n    sequence = []\n    a, b = 0, 1\n    while len(sequence) < n:\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n\nn_terms = 10\n\nfib_sequence = fibonacci(n_terms)\n\nprint(f\"Fibonacci sequence up to {n_terms} terms:\")\nprint(fib_sequence)`, `def factorial(n):\nif n == 0 or n == 1:\n    return 1\nelse:\n    return n * factorial(n - 1)\nnum = 5\nresult = factorial(num)\nprint(f\"The factorial of {num} is {result}\")`, `def is_prime(n):\nif n <= 1:\n    return False\nif n <= 3:\n    return True\nif n % 2 == 0 or n % 3 == 0:\n    return False\ni = 5\nwhile i * i <= n:\n    if n % i == 0 or n % (i + 2) == 0:\n        return False\n    i += 6\nreturn True\n\n# Test the function\nnum = 29\nresult = is_prime(num)\nif result:\nprint(f\"{num} is a prime number\")\nelse:\nprint(f\"{num} is not a prime number\")`];","map":{"version":3,"names":["coding","python"],"sources":["C:/Users/Windows 11/All/real/vuejob/src/mytextes/codetext.js"],"sourcesContent":["export const coding = [\r\n    ,\r\n`n_terms = 10:\r\n    print(f\"Fibonacci sequence up to {n_terms} terms:\")`,\r\n`add(\"code\"){\r\n    return \"salom()\";\r\n}`,\r\n`function factorial(n) {\r\n    if (n < 0) {\r\n        return 'Factorial is not defined for negative numbers';\r\n    } else if (n === 0 || n === 1) {\r\n        return 1;\r\n    } else {\r\n        let result = 1;\r\n        for (let i = 2; i <= n; i++) {\r\n            result *= i;\r\n        }\r\n        return result;\r\n    }\r\n}`\r\n];\r\nexport const python = [\r\n`def fibonacci(n):\r\n    sequence = []\r\n    a, b = 0, 1\r\n    while len(sequence) < n:\r\n        sequence.append(a)\r\n        a, b = b, a + b\r\n    return sequence\r\n\r\nn_terms = 10\r\n\r\nfib_sequence = fibonacci(n_terms)\r\n\r\nprint(f\"Fibonacci sequence up to {n_terms} terms:\")\r\nprint(fib_sequence)`,\r\n`def factorial(n):\r\nif n == 0 or n == 1:\r\n    return 1\r\nelse:\r\n    return n * factorial(n - 1)\r\nnum = 5\r\nresult = factorial(num)\r\nprint(f\"The factorial of {num} is {result}\")`,\r\n`def is_prime(n):\r\nif n <= 1:\r\n    return False\r\nif n <= 3:\r\n    return True\r\nif n % 2 == 0 or n % 3 == 0:\r\n    return False\r\ni = 5\r\nwhile i * i <= n:\r\n    if n % i == 0 or n % (i + 2) == 0:\r\n        return False\r\n    i += 6\r\nreturn True\r\n\r\n# Test the function\r\nnum = 29\r\nresult = is_prime(num)\r\nif result:\r\nprint(f\"{num} is a prime number\")\r\nelse:\r\nprint(f\"{num} is not a prime number\")`\r\n]"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAG,GAErB;AACD,wDAAwD,EACvD;AACD;AACA,EAAE,EACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CACD;AACD,OAAO,MAAMC,MAAM,GAAG,CACrB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,EACnB;AACD;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAC5C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,CACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}