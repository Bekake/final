{"ast":null,"code":"export const coding = [`def fibonacci(n):\n    sequence = []\n    a, b = 0, 1\n    while len(sequence) < n:\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n\nn_terms = 10\n\nfib_sequence = fibonacci(n_terms)\n\nprint(f\"Fibonacci sequence up to {n_terms} terms:\")\nprint(fib_sequence)`, `n_terms = 10:\n    print(f\"Fibonacci sequence up to {n_terms} terms:\")`, `add(\"code\"){\n    return \"salom()\";\n}`, `function factorial(n) {\n    if (n < 0) {\n        return 'Factorial is not defined for negative numbers';\n    } else if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        let result = 1;\n        for (let i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}`];","map":{"version":3,"names":["coding"],"sources":["C:/Users/Windows 11/All/real/vuejob/src/mytextes/codetext.js"],"sourcesContent":["export const coding = [\r\n    `def fibonacci(n):\r\n    sequence = []\r\n    a, b = 0, 1\r\n    while len(sequence) < n:\r\n        sequence.append(a)\r\n        a, b = b, a + b\r\n    return sequence\r\n\r\nn_terms = 10\r\n\r\nfib_sequence = fibonacci(n_terms)\r\n\r\nprint(f\"Fibonacci sequence up to {n_terms} terms:\")\r\nprint(fib_sequence)`,\r\n`n_terms = 10:\r\n    print(f\"Fibonacci sequence up to {n_terms} terms:\")`,\r\n`add(\"code\"){\r\n    return \"salom()\";\r\n}`,\r\n`function factorial(n) {\r\n    if (n < 0) {\r\n        return 'Factorial is not defined for negative numbers';\r\n    } else if (n === 0 || n === 1) {\r\n        return 1;\r\n    } else {\r\n        let result = 1;\r\n        for (let i = 2; i <= n; i++) {\r\n            result *= i;\r\n        }\r\n        return result;\r\n    }\r\n}`\r\n]"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAG,CACjB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,EACnB;AACD,wDAAwD,EACvD;AACD;AACA,EAAE,EACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}