{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7a1d2b1d\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"words\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"focused\"\n}, \"Click here to begin\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", {\n    class: \"game\",\n    tabindex: \"0\",\n    onKeyup: _cache[0] || (_cache[0] = (...args) => $options.star && $options.star(...args)),\n    ref: \"inputref\"\n  }, [_createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.mytext, (letter, index) => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      key: index,\n      class: _normalizeClass($options.getclass(index))\n    }, _toDisplayString(letter), 3 /* TEXT, CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_2], 544 /* NEED_HYDRATION, NEED_PATCH */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.change && $options.change(...args))\n  }, \"add\"), _createElementVNode(\"p\", null, _toDisplayString($data.intext), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_Fragment","tabindex","onKeyup","_cache","args","$options","star","ref","_hoisted_1","_renderList","$data","mytext","letter","index","key","_normalizeClass","getclass","_hoisted_2","onClick","change","_toDisplayString","intext"],"sources":["C:\\Users\\Windows 11\\All\\real\\vuejob\\src\\views\\speed.vue"],"sourcesContent":["<template>\r\n<div class=\"game\" tabindex=\"0\" @keyup=\"star\" ref=\"inputref\">\r\n    <div class=\"words\"><span  v-for=\"(letter, index) in mytext\" :key=\"index\" :class=\"getclass(index)\">{{ letter }}</span></div>\r\n    <div class=\"focused\">Click here to begin</div>\r\n</div>\r\n<button @click=\"change\">add</button>\r\n<p>{{ intext }}</p>\r\n</template>\r\n<script>\r\nexport default{\r\n    data(){\r\n        return{\r\n            mytext : \"This is something for text, please enter your text here and try again later to get more information\",\r\n            intext : \"\",\r\n            myall : [],\r\n        }\r\n    },\r\n    methods:{\r\n        change(){\r\n            this.$refs.inputref.focus();\r\n        },\r\n        getclass(index){\r\n            let willclass = 'default';\r\n            if(this.myall.length > 0){\r\n                for(let i = 0; i < this.intext.length;i++){\r\n                    if(index== this.myall[i].indexnum){\r\n                        willclass = this.myall[i].class;\r\n                        break;\r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n            return willclass;\r\n        },\r\n        star(event){\r\n            let myword = this.intext\r\n            \r\n            if(event.key == \"Backspace\"){\r\n                myword  = myword.slice(0, -1);\r\n            }\r\n            else if(event.key == \"CapsLock\" || event.key == \"Shift\" || event.key == \"Control\" || event.key == \"AltGraph\" || event.key == \"Alt\" || event.key == \"ArrowUp\" ){\r\n                myword = myword;\r\n            }\r\n            else{\r\n                myword += event.key\r\n            }\r\n            this.intext = myword;\r\n            let mylength = myword.length;\r\n            let inputinfo = {\r\n                indexnum : mylength,\r\n                class : 'correct',\r\n                expectedchar: this.mytext.charAt(mylength),\r\n                writtenchar: myword.charAt(mylength), \r\n            }\r\n            this.myall = this.myall.filter(element => element.indexnum !== mylength)\r\n            this.myall = this.myall.filter(elem => elem.indexnum <= mylength)\r\n            if(this.mytext.charAt(mylength) !== myword.charAt(mylength)){\r\n                inputinfo.class = 'incorrect'\r\n            }\r\n            console.log(this.myall)\r\n            this.myall.push(inputinfo);\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n\r\n*{\r\n    font-size: 30px;\r\n}\r\n.default{\r\n    color: rgb(59, 59, 59);\r\n}\r\n.correct{\r\n    color: blue;\r\n}\r\n.incorrect{\r\n    color: red;\r\n}\r\n.game{\r\n    margin-top: 100px;\r\n    height: 100px;\r\n    width: 80%;\r\n    margin: auto;\r\n    background-color: rgb(208, 203, 203);\r\n    position: relative;\r\n}\r\n.words{\r\n    filter: blur(4px);\r\n}\r\n.focused{\r\n    position: absolute;\r\n    inset: 0;\r\n    text-align: center;\r\n}\r\n.game:focus .focused{\r\n    display: none;\r\n}\r\n.game:focus .words{\r\n    filter: blur(0px);\r\n}\r\n</style>"],"mappings":";;;EAESA,KAAK,EAAC;AAAO;gEAClBC,mBAAA,CAA8C;EAAzCD,KAAK,EAAC;AAAS,GAAC,qBAAmB;;uBAH5CE,mBAAA,CAAAC,SAAA,SACAF,mBAAA,CAGM;IAHDD,KAAK,EAAC,MAAM;IAACI,QAAQ,EAAC,GAAG;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAC,IAAA,IAAAF,IAAA,CAAI;IAAEG,GAAG,EAAC;MAC7CT,mBAAA,CAA2H,OAA3HU,UAA2H,I,kBAAxGT,mBAAA,CAAkGC,SAAA,QAFzHS,WAAA,CAEwDC,KAAA,CAAAC,MAAM,EAF9D,CAEsCC,MAAM,EAAEC,KAAK;yBAA5Bd,mBAAA,CAAkG;MAAxDe,GAAG,EAAED,KAAK;MAAGhB,KAAK,EAFnFkB,eAAA,CAEqFV,QAAA,CAAAW,QAAQ,CAACH,KAAK;wBAAMD,MAAM;oCAC3GK,UAA8C,C,yCAElDnB,mBAAA,CAAoC;IAA3BoB,OAAK,EAAAf,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAc,MAAA,IAAAd,QAAA,CAAAc,MAAA,IAAAf,IAAA,CAAM;KAAE,KAAG,GAC3BN,mBAAA,CAAmB,WAAAsB,gBAAA,CAAbV,KAAA,CAAAW,MAAM,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}