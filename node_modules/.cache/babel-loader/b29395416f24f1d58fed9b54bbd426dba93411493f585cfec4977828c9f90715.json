{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7a1d2b1d\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"words\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"focused\"\n}, \"Click here to begin\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"game\",\n    tabindex: \"0\",\n    onKeyup: _cache[0] || (_cache[0] = (...args) => $options.star && $options.star(...args))\n  }, [_createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.myall, (letter, index) => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      key: index,\n      class: _normalizeClass(letter.class)\n    }, _toDisplayString(this.intext.charAt(index)), 3 /* TEXT, CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_2], 32 /* NEED_HYDRATION */);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","tabindex","onKeyup","_cache","args","$options","star","_hoisted_1","_Fragment","_renderList","$data","myall","letter","index","key","_normalizeClass","intext","charAt","_hoisted_2"],"sources":["C:\\Users\\Windows 11\\All\\real\\vuejob\\src\\views\\speed.vue"],"sourcesContent":["<template>\r\n<div class=\"game\" tabindex=\"0\" @keyup=\"star\">\r\n    <div class=\"words\"><span v-for=\"(letter, index) in myall\" :key=\"index\" :class=\"letter.class\">{{ this.intext.charAt(index) }}</span></div>\r\n    <div class=\"focused\">Click here to begin</div>\r\n</div>\r\n\r\n</template>\r\n<script>\r\nexport default{\r\n    data(){\r\n        return{\r\n            actualtext : \"\",\r\n            mytext : \"This is something for text, please enter your text here and try again later to get more information\",\r\n            intext : \"\",\r\n            mlength : null,\r\n            istrue : true,\r\n            myall : [],\r\n        }\r\n    },\r\n    mounted(){\r\n        this.splitting()\r\n    },\r\n    methods:{\r\n        splitting(){\r\n            this.actualtext = this.mytext.split('');\r\n        },\r\n        getclass(index){\r\n            if(this.istrue){\r\n                return 'correct';\r\n            }\r\n            else{\r\n                return 'incorrect';\r\n            }\r\n\r\n        },\r\n        star(event){\r\n            let myword = this.intext;\r\n            let goon;\r\n            let mylength = this.intext.length;\r\n            if(event.key == \"Backspace\"){\r\n                let newword = myword.slice(0, -1);\r\n                this.intext = newword\r\n                goon = false\r\n            }\r\n            else if(event.key == \"CapsLock\" || event.key == \"Shift\" || event.key == \"Control\" || event.key == \"AltGraph\" || event.key == \"Alt\" || event.key == \"ArrowUp\" ){\r\n                console.log(\"i don't want to change in this situation\")\r\n                goon = false;\r\n            }\r\n            else{\r\n                this.intext +=event.key\r\n                goon = true;\r\n                \r\n            }\r\n            if(goon){\r\n                this.myall = this.myall.filter(element => element.indexnum !== mylength)\r\n                if(this.mytext.charAt(mylength) == this.intext.charAt(mylength)){\r\n                    \r\n                    let realcss = {\r\n                        indexnum : mylength,\r\n                        class : 'correct',\r\n                        expectedchar: this.mytext.charAt(mylength),\r\n                        writtenchar: this.intext.charAt(mylength), \r\n                        len: mylength,\r\n                    }\r\n                    this.myall.push(realcss);\r\n                }\r\n                else{\r\n                    let realc = {\r\n                        indexnum : mylength,\r\n                        class : 'incorrect',\r\n                        expectedchar: this.mytext.charAt(mylength),\r\n                        writtenchar: this.intext.charAt(mylength), \r\n                        len: mylength,\r\n                    }\r\n                    this.myall.push(realc);\r\n                }\r\n            }\r\n            \r\n            console.log(this.myall)\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n.correct{\r\n    color: blue;\r\n}\r\n.incorrect{\r\n    color: red;\r\n}\r\n.game{\r\n    width: 80%;\r\n    margin: auto;\r\n    background-color: gray;\r\n    position: relative;\r\n}\r\n.words > span{\r\n    filter: blur(4px);\r\n    color: rgb(95, 92, 92);\r\n    font-size: 20px;\r\n}\r\n.focused{\r\n    position: absolute;\r\n    inset: 0;\r\n    text-align: center;\r\n    \r\n}\r\n.game:focus .focused{\r\n    display: none;\r\n}\r\n.game:focus .words{\r\n    filter: blur(0px);\r\n}\r\n</style>"],"mappings":";;;EAESA,KAAK,EAAC;AAAO;gEAClBC,mBAAA,CAA8C;EAAzCD,KAAK,EAAC;AAAS,GAAC,qBAAmB;;uBAF5CE,mBAAA,CAGM;IAHDF,KAAK,EAAC,MAAM;IAACG,QAAQ,EAAC,GAAG;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAC,IAAA,IAAAF,IAAA,CAAI;MACvCL,mBAAA,CAAyI,OAAzIQ,UAAyI,I,kBAAtHP,mBAAA,CAAgHQ,SAAA,QAFvIC,WAAA,CAEuDC,KAAA,CAAAC,KAAK,EAF5D,CAEqCC,MAAM,EAAEC,KAAK;yBAA3Bb,mBAAA,CAAgH;MAAxEc,GAAG,EAAED,KAAK;MAAGf,KAAK,EAFjFiB,eAAA,CAEmFH,MAAM,CAACd,KAAK;6BAAUkB,MAAM,CAACC,MAAM,CAACJ,KAAK;oCACxHK,UAA8C,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}