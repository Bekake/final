{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelSelect as _vModelSelect, createStaticVNode as _createStaticVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-74f55114\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"min\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<option value=\\\"javascript\\\" data-v-74f55114>Javascript</option><option value=\\\"python\\\" data-v-74f55114>Python</option><option value=\\\"vue\\\" data-v-74f55114>Vue</option><option value=\\\"css\\\" data-v-74f55114>CSS</option><option value=\\\"sql\\\" data-v-74f55114>SQL</option>\", 5);\nconst _hoisted_7 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.intext = $event),\n    name: \"programming\",\n    id: \"program\",\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.check && $options.check(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.intext]])]), _createElementVNode(\"pre\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.mytext, (letter, index) => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      class: _normalizeClass([\"every\", $options.cla(index)]),\n      key: index\n    }, _toDisplayString(letter), 3 /* TEXT, CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _withDirectives(_createElementVNode(\"select\", {\n    name: \"mytil\",\n    id: \"mytil\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.language = $event),\n    onChange: _cache[3] || (_cache[3] = (...args) => $options.gettil && $options.gettil(...args))\n  }, [..._hoisted_7], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.language]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.myfoc && $options.myfoc(...args))\n  }, \"Focus\")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createStaticVNode","_hoisted_2","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_cache","$event","$data","intext","name","id","onInput","args","$options","check","_renderList","mytext","letter","index","_normalizeClass","cla","key","language","onChange","gettil","_hoisted_7","onClick","myfoc"],"sources":["C:\\Users\\Windows 11\\All\\real\\vuejob\\src\\views\\new.vue"],"sourcesContent":["<template>\r\n    <div class=\"min\">\r\n        <textarea v-model=\"intext\" name=\"programming\" id=\"program\" @input=\"check\"></textarea>\r\n    </div>\r\n    <pre><span class=\"every\" v-for=\"(letter, index) in mytext\"  :class=\"cla(index)\" :key=\"index\">{{ letter }}</span></pre>\r\n    <select name=\"mytil\" id=\"mytil\" v-model=\"language\" @change=\"gettil\">\r\n        <option value=\"javascript\">Javascript</option>\r\n        <option value=\"python\">Python</option>\r\n        <option value=\"vue\">Vue</option>\r\n        <option value=\"css\">CSS</option>\r\n        <option value=\"sql\">SQL</option>\r\n    </select>\r\n    <button @click=\"myfoc\">Focus</button>\r\n</template> \r\n<script>\r\nimport * as CodeMirror from 'codemirror';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport 'codemirror/mode/javascript/javascript.js';\r\nimport 'codemirror/mode/python/python.js';\r\nimport 'codemirror/mode/sql/sql.js';\r\nimport 'codemirror/mode/vue/vue.js';\r\nimport 'codemirror/mode/css/css.js';\r\nimport 'codemirror/addon/edit/closebrackets.js';\r\nimport 'codemirror/addon/edit/matchbrackets.js';\r\nimport {coding} from '../mytextes/codetext.js';\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            language: \"javascript\",\r\n            myshow: false,\r\n            intext: \"\",\r\n            mytext: coding[3],\r\n            myall: [],\r\n            mynow: 0,\r\n        };\r\n    },\r\n    mounted() {\r\n        this.setevery()\r\n    },\r\n    methods: {\r\n        gettil(){\r\n            this.setevery()\r\n        },\r\n        setevery(){\r\n            this.editor = CodeMirror.fromTextArea(document.getElementById(\"program\"), {\r\n                lineNumbers: true,\r\n                theme: 'dracula',\r\n                mode: this.language,\r\n                autoCloseBrackets: true,\r\n                matchBrackets: true,\r\n                indentUnit: 4,\r\n                tabSize: 4,\r\n            });\r\n            this.editor.setValue(this.intext);\r\n            this.editor.on('change', () => {\r\n                this.intext = this.editor.getValue();\r\n                this.check(this.intext);\r\n            });\r\n            this.editor.on('cursorActivity', () => {\r\n                const cursorIndex = this.getCursorIndex();\r\n                this.findIndexInMyAll(cursorIndex);\r\n            });\r\n        },\r\n        getCursorIndex() {\r\n            const cursor = this.editor.getCursor();\r\n            const cursorIndex = this.editor.indexFromPos(cursor);\r\n            return cursorIndex;\r\n        },\r\n        myfocus() {\r\n            const cursorIndex = this.getCursorIndex();\r\n            this.findIndexInMyAll(cursorIndex);\r\n        },\r\n        findIndexInMyAll(cursorIndex) {\r\n            const entry = this.myall.find(entry => entry.indexnum === cursorIndex-1);\r\n            if (entry) {\r\n                this.mynow = entry.indexnum+1;\r\n                console.log(this.mynow)\r\n            } \r\n        },\r\n        myfoc(){\r\n            this.editor.focus();\r\n        },\r\n        cla(num){\r\n            let reclass = 'default'\r\n            for(let i =0; i < this.myall.length; i++){\r\n                if(this.myall[i].indexnum === num){\r\n                    reclass = this.myall[i].class\r\n                }\r\n            }\r\n            if(num == this.mynow){\r\n                reclass = 'upcoming'\r\n            }\r\n            return reclass\r\n        },\r\n        getsecond(num, birinchi, ikkinchi, yourclass) {\r\n            let birinfo = {\r\n                indexnum: num,\r\n                expect: this.mytext[num],\r\n                writtenchar: birinchi,\r\n                class: yourclass,\r\n            };\r\n            let lastindex = this.mytext.indexOf(ikkinchi, num + 1);\r\n            let ikkiinfo = {\r\n                indexnum: lastindex,\r\n                expect: this.mytext[num],\r\n                writtenchar: ikkinchi,\r\n                class: 'correct',\r\n            };\r\n            this.myall.push(birinfo, ikkiinfo);\r\n        },\r\n        check(text) {\r\n            \r\n            let mylength = text.length - 1;\r\n            console.log(mylength)\r\n            this.myall = [];\r\n            let another = true;\r\n            let yana = true;\r\n            let boshqa = true;\r\n            let delnum = -1;\r\n            for (let i = 0; i <= mylength; i++) {\r\n                let goon = true;\r\n                let myinfo = {\r\n                    indexnum: i,\r\n                    expect: this.mytext[i],\r\n                    writtenchar: text[i],\r\n                    class: 'correct',\r\n                };\r\n                \r\n                if (text[i] !== this.mytext[i]) {\r\n                    myinfo.class = 'incorrect';\r\n                }\r\n                if (text[i] == '(') {\r\n                    this.getsecond(i, '(', ')', myinfo.class);\r\n                    goon = false;\r\n                } else if (text[i] == ')') {\r\n                    goon = false;\r\n                } else if (text[i] == '}') {\r\n                    goon = false;\r\n                } else if (text[i] == '\"') {\r\n                    if (another) {\r\n                        this.getsecond(i, '\"', '\"', myinfo.class);\r\n                    }\r\n                    another = false;\r\n                    goon = false;\r\n                } else if (text[i] == '`') {\r\n                    if (yana) {\r\n                        this.getsecond(i, '`', '`', myinfo.class);\r\n                    }\r\n                    yana = false;\r\n                    goon = false;\r\n                } else if (text[i] == '{') {\r\n                    this.getsecond(i, '{', '}', myinfo.class);\r\n                    goon = false;\r\n                } else if (text[i] == \"'\") {\r\n                    if (boshqa) {\r\n                        this.getsecond(i, \"'\", \"'\", myinfo.class);\r\n                    }\r\n                    boshqa = false;\r\n                    goon = false;\r\n                }\r\n                if(myinfo.writtenchar == '\\n' && myinfo.class == 'incorrect'){\r\n                    delnum = i\r\n                }\r\n                if(myinfo.writtenchar == ' ' && myinfo.indexnum > this.mynow){\r\n                    delnum = i\r\n                }\r\n                if (goon) {\r\n                    this.myall.push(myinfo);\r\n                }\r\n                this.myall = this.myall.filter(element => element.indexnum !== delnum)\r\n            }\r\n            console.log(this.myall)\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.upcoming{\r\n    color: rgb(84, 84, 250);\r\n    position: relative;\r\n}\r\n.upcoming::after{\r\n    content: '';\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 0;\r\n    transform: translateX(-50%);\r\n    width: 80%; \r\n    height: 2px; \r\n    background-color: rgb(84, 84, 250); \r\n    animation: animate 1s linear infinite;\r\n}\r\n@keyframes animate{\r\n    0%{\r\n        opacity: 1;\r\n    }\r\n    50%{\r\n        opacity: 0;\r\n    }\r\n    100%{\r\n        opacity: 1;\r\n    }\r\n}\r\n.every{\r\n    font-size: 30px;\r\n    line-height: 1;\r\n    vertical-align: middle;\r\n    position: relative;\r\n    text-align: center;\r\n    width: 20px;\r\n    top: 10px;\r\n    margin-right: 0.8px;\r\n    border-radius: 13%;\r\n    height: 40px;\r\n}\r\n.default{\r\n    color: rgb(59, 59, 59);\r\n}\r\n.correct{\r\n    background-color: rgb(89, 255, 89);\r\n    color: green;\r\n}\r\n.incorrect{\r\n    color: rgb(236, 74, 74);\r\n    background-color: rgb(160, 69, 69);\r\n}\r\n</style>\r\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAK;gCADpBC,kBAAA;oBAMQC,UAA8C,C;;uBANtDC,mBAAA,CAAAC,SAAA,SACIC,mBAAA,CAEM,OAFNC,UAEM,G,gBADFD,mBAAA,CAAqF;IAF7F,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAE2BC,KAAA,CAAAC,MAAM,GAAAF,MAAA;IAAEG,IAAI,EAAC,aAAa;IAACC,EAAE,EAAC,SAAS;IAAEC,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,KAAA,IAAAD,QAAA,CAAAC,KAAA,IAAAF,IAAA,CAAK;iEAArDL,KAAA,CAAAC,MAAM,E,KAE7BL,mBAAA,CAAsH,e,kBAAjHF,mBAAA,CAA2GC,SAAA,QAJpHa,WAAA,CAIuDR,KAAA,CAAAS,MAAM,EAJ7D,CAIqCC,MAAM,EAAEC,KAAK;yBAAzCjB,mBAAA,CAA2G;MAArGH,KAAK,EAJpBqB,eAAA,EAIqB,OAAO,EAA4CN,QAAA,CAAAO,GAAG,CAACF,KAAK;MAAIG,GAAG,EAAEH;wBAAUD,MAAM;oDACtGd,mBAAA,CAMS;IANDM,IAAI,EAAC,OAAO;IAACC,EAAE,EAAC,OAAO;IALnC,uBAAAL,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAK6CC,KAAA,CAAAe,QAAQ,GAAAhB,MAAA;IAAGiB,QAAM,EAAAlB,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAW,MAAA,IAAAX,QAAA,CAAAW,MAAA,IAAAZ,IAAA,CAAM;KALtE,IAAAa,UAAA,2C,gBAK6ClB,KAAA,CAAAe,QAAQ,E,GAOjDnB,mBAAA,CAAqC;IAA5BuB,OAAK,EAAArB,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAc,KAAA,IAAAd,QAAA,CAAAc,KAAA,IAAAf,IAAA,CAAK;KAAE,OAAK,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}